# Запуск = docker-compose up -d (detached)
# Что делает флаг -d:
# - Запускает контейнеры в фоне - они работают независимо от текущего терминала
# - Освобождает терминал - вы можете продолжать работать в командной строке
# - Контейнеры продолжают работать даже если вы закроете терминал

# Остановка = docker-compose down (-v) - Ключ -v указывает, что при остановке
# нужно также удалить все тома (volumes) с данными

services:
#  payment-service-app:
#    image: payment-service-app
#    ports:
#      - "8080:8080"

  postgres:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_USER: admin         # имя пользователя
      POSTGRES_PASSWORD: secret    # пароль
      POSTGRES_DB: payment-db      # имя БД по умолчанию
    ports:
      - "5432:5432"                # проброс порта PostgreSQL
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@email.com    # учётная запись для входа
      PGADMIN_DEFAULT_PASSWORD: admin           # пароль для входа
    ports:
      - "8081:80"          # UI будет доступен по localhost:8081
    depends_on:
      - postgres
    restart: unless-stopped

  # В качестве IAM провайдера используем KeyCloak. Это бесплатное
  # приложение с открытым исходным кодом, написанное на Java и реализующее
  # протокол аутентификации OAuth 2.0.
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    container_name: keycloak
    command:
      - start-dev   # режим для локального тестирования и прототипирования
      - --http-port=8080
      - --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"   # для клиентов из docker-сети (Kafka UI, другие сервисы) = внутренние процессы
                      # Kafka (взаимодействие брокеров между собой)
      - "9093:9093"   # для внешних клиентов (ваш хост)
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      # слушатели
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9093,CONTROLLER://:9094
      # listeners используют незашифрованное соединение
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT

      # рекламируем: внутри докера - kafka:9092, снаружи - localhost:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093

      # брокеры общаются через PLAINTEXT (у вас кластер из одного узла)
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
#  Создание демо топика через терминал
#  (Ctrl + C - чтобы выйти из Kafka console producer (из режима ввода сообщений в терминале))
#  docker exec -it kafka /opt/bitnami/kafka/bin/kafka-console-producer.sh \ --bootstrap-server localhost:9092 \ --topic demo

volumes:
  pgdata:
  kafka_data:
